# Generated by Django 4.2.2 on 2023-06-14 12:52

import autoslug.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='RolesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('permissions', models.ManyToManyField(blank=True, to='auth.permission')),
            ],
            options={
                'verbose_name': 'Roles',
                'verbose_name_plural': 'Roller',
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='CustomUserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=200, verbose_name='Eposta Adresi')),
                ('first_name', models.CharField(max_length=150, verbose_name='İsim')),
                ('last_name', models.CharField(max_length=150, verbose_name='Soyisim')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='username', unique=True)),
                ('avatar', models.ImageField(blank=True, default='default-avatar.jpg', null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('birth_date', models.DateField(blank=True, max_length=200, null=True, verbose_name='Doğum Tarihi')),
                ('github_link', models.URLField(blank=True, null=True, verbose_name='Github')),
                ('linkedin_link', models.URLField(blank=True, null=True, verbose_name='LinkedIn')),
                ('instagram_link', models.URLField(blank=True, null=True, verbose_name='Instagram')),
                ('courses', models.ManyToManyField(related_name='users', to='courses.coursesmodel', verbose_name='Bölümü')),
                ('groups', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='account.rolesmodel', verbose_name='Rol')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Üye',
                'verbose_name_plural': 'Üyeler',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
